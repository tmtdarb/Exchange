// <auto-generated />
using System;
using Exchange.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Exchange.Infrastructure.Migrations
{
    [DbContext(typeof(ExchangeDbContext))]
    [Migration("20250914074805_InitialDatabase")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Exchange.Domain.Entities.Conversion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("AmountToBuy")
                        .HasColumnType("decimal(18,6)");

                    b.Property<decimal>("AmountToSell")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("Comment")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTimeOffset>("ConversionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("RecievedCurrencyID")
                        .HasColumnType("int");

                    b.Property<int>("SoldCurrencyID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("RecievedCurrencyID");

                    b.HasIndex("SoldCurrencyID");

                    b.ToTable("Conversions", (string)null);
                });

            modelBuilder.Entity("Exchange.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CurrencyNameEn")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyCode")
                        .IsUnique();

                    b.HasIndex("OrderNumber");

                    b.ToTable("Currencies", (string)null);
                });

            modelBuilder.Entity("Exchange.Domain.Entities.ExchangeRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("BuyRate")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("int");

                    b.Property<decimal>("SellRate")
                        .HasColumnType("decimal(18,6)");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyID");

                    b.ToTable("ExchangeRates", (string)null);
                });

            modelBuilder.Entity("Exchange.Domain.Entities.Conversion", b =>
                {
                    b.HasOne("Exchange.Domain.Entities.Currency", "RecievedCurrency")
                        .WithMany("RecievedCurrencies")
                        .HasForeignKey("RecievedCurrencyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Exchange.Domain.Entities.Currency", "SoldCurrency")
                        .WithMany("SoldCurrencies")
                        .HasForeignKey("SoldCurrencyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RecievedCurrency");

                    b.Navigation("SoldCurrency");
                });

            modelBuilder.Entity("Exchange.Domain.Entities.ExchangeRate", b =>
                {
                    b.HasOne("Exchange.Domain.Entities.Currency", "Currency")
                        .WithMany("ExchangeRates")
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Exchange.Domain.Entities.Currency", b =>
                {
                    b.Navigation("ExchangeRates");

                    b.Navigation("RecievedCurrencies");

                    b.Navigation("SoldCurrencies");
                });
#pragma warning restore 612, 618
        }
    }
}
